{"meta":{"title":"昌久个人博客","subtitle":"我是子标题不知道说啥","description":"","author":"昌久","url":"https://githubbycj.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-05-31T03:17:38.199Z","updated":"2020-05-31T03:17:38.199Z","comments":false,"path":"/404.html","permalink":"https://githubbycj.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-30T12:16:27.436Z","updated":"2020-05-30T12:16:27.436Z","comments":false,"path":"about/index.html","permalink":"https://githubbycj.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2020-05-30T12:16:27.436Z","updated":"2020-05-30T12:16:27.436Z","comments":false,"path":"books/index.html","permalink":"https://githubbycj.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-05-30T12:16:27.437Z","updated":"2020-05-30T12:16:27.437Z","comments":true,"path":"links/index.html","permalink":"https://githubbycj.github.io/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-05-30T12:16:27.437Z","updated":"2020-05-30T12:16:27.437Z","comments":false,"path":"categories/index.html","permalink":"https://githubbycj.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-05-30T12:16:27.437Z","updated":"2020-05-30T12:16:27.437Z","comments":false,"path":"repository/index.html","permalink":"https://githubbycj.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-30T12:16:27.438Z","updated":"2020-05-30T12:16:27.438Z","comments":false,"path":"tags/index.html","permalink":"https://githubbycj.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"CentOS7下安装FastDFS","slug":"fastdfs-install","date":"2020-06-26T05:28:03.000Z","updated":"2020-06-28T15:25:11.452Z","comments":true,"path":"2020/06/26/fastdfs-install/","link":"","permalink":"https://githubbycj.github.io/2020/06/26/fastdfs-install/","excerpt":"","text":"应用场景当使用springcloud 微服务实现负载均衡时，遇到文件上传获取的难题，这时可以将文件放到FastDFS 服务上，只需要保存FastDFS返回的文件key 就好。 下载FastDFS安装依赖包有兴趣可以去作者大佬的博客看看,给个Star啥的。fastdfs-6.06.tar.gzlibfastcommon-1.0.43.tar.gzfastdfs-nginx-module-1.22.tar.gz 下载命令 123456789101112131415# 安装编译依赖yum -y install gcc yum -y install gcc-c++# 进入/opt 文件夹cd /opt# 创建文件夹 softwaresmkdir softwares # 进入softwares cd softwares# 下载fastdfs依赖文件wget -O fastdfs-6.06.tar.gz https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gzwget -O libfastcommon-1.0.43.tar.gz https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gzwget -O fastdfs-nginx-module-1.22.tar.gz https://github.com/happyfish100/fastdfs-nginx-module/archive/V1.22.tar.gz 访问时依赖nginx 所以也要下载nginxnginx 官网 安装并配置安装是有顺序的，先安装 libfastcommon再安装 fastdfs， 如果有需要用到nginx，就先安装nginx，再配置fastdfs-nginx-module 包 安装libfastcommon1234567891011# 进入 /opt/softwares文件夹cd /opt/softwares# 解压 libfastcommon-1.0.43.tar.gz tar -zxvf libfastcommon-1.0.43.tar.gz# 进入解压好的文件夹里面cd libfastcommon-1.0.43/# 运行make.sh编译 ./make.sh# 安装./make.sh install 安装fastdfs12345678910# 进入 /opt/softwares文件夹cd /opt/softwares# 解压tar -zxvf fastdfs-6.06.tar.gz# 进入解压好的文件夹里面cd fastdfs-6.06# 运行make.sh编译 ./make.sh# 安装./make.sh install 配置fastdfs创建数据文件夹123456# 创建tracker 日志和数据文件存放的地址mkdir -p /data/fastdfs/tracker# 创建storage 日志和数据文件存放的地址mkdir -p /data/fastdfs/storage# 数据存放在store0 文件夹上mkdir -p /data/fastdfs/storage/store0 配置tracker.conf123456789# 进入fastdfs 配置文件目录cd /etc/fdfs # 查看配置文件ls -lh# 备份tracker.conf cp tracker.conf.sample tracker.conf# 编辑tracker.confvi tracker.conf# 配置 bash_path = /data/fastdfs/tracker 配置storage.conf 和 storage_ids.conf1234567891011121314151617 # 进入fastdfs 配置文件目录cd /etc/fdfs # 查看配置文件ls -lh# 备份storage.confcp storage.conf.sample storage.conf# 编辑storage.confvi storage.conf# group_name = group1 这里可以自定义group名称# base_path = /data/fastdfs/storage 配置storage基础路径# store_path = /data/fastdfs/storage/store0 配置数据存放路径# tracker_server = 192.168.3.12:22122 这里不能写成127.0.0.1 ，由于只有一台tracker 服务所以写本机ip 就好了# 备份storage_ids.confcp storage_ids.conf.sample storage_ids.conf# 编辑 storage_ids.confvi storage_ids.conf# 100001 group1 192.168.3.12 由于只有一个group1 所以保留一个，改成本机ip地址就好 启动服务启动服务在/etc/init.d下 启动tracker服务1234# 进入/etc/init.dcd /etc/init.d# 指定配置 文件启动 ， 可以不指定它会默认去找 tracker.conf./fdfs_trackerd start /etc/fdfs/tracker.conf 启动storage服务12345678# 进入/etc/init.dcd /etc/init.d# 指定配置 文件启动 ， 可以不指定它会默认去找 storage.conf./fdfs_storaged start /etc/sdfs/storage.conf # 如果想在本机启动多个storage 可以复制多个storage.conf 改变名字和里面配置的端口参数,# 然后通过指定配置文件启动的方式启动多个storage服务# 比如 ./fdfs_storaged start /etc/sdfs/storage1.conf # ./fdfs_storaged start /etc/sdfs/storage2.conf 等，启动多个storage 安装nginx先安装nginx 依赖包123yum install -y pcre pcre-develyum install -y zlib zlib-develyum install -y openssl openssl-devel 下载nginx并解压123cd /opt/softwares/wget -c https://nginx.org/download/nginx-1.16.1.tar.gztar -zxvf nginx-1.16.1.tar.gz 配置并安装nginx123456789# 进入解压后的目录cd nginx-1.16.1 # 执行默认配置./configure# 编译make# 安装make install# 可以使用&amp;&amp; 符号连起来一起运行 make &amp;&amp; make install 启动nginxnginx 安装路径在 /usr/local/nginx ，配置文件在conf 文件夹上 12# 启动nginx /usr/local/nginx/sbin/nginx nginx 常用命令说明 命令 说明 nginx -s stop 停止 nginx -s quit 退出 nginx -s reload 重新读取配置并启动 配置FastDFS 的Nginx 模块解压 fastdfs-nginx 模块1tar -zxvf fastdfs-nginx-module-1.22.tar.gz 配置nginx12345678910# 如果启动了nginx ，先停止nginx /usr/local/nginx/sbin/nginx -s quit# 进入刚刚解压的nginx 目录cd /opt/softwares/nginx-1.16.1# 添加fastdfs-nginx模块到nginx ./configure --add-module=../fastdfs-nginx-module-1.22/src# 重新编译安装nginxmake &amp;&amp; make install 查看是否安装fastdfs-nginx如果出现 configure arguments: –add-module=../fastdfs-nginx-module-1.22/src 说明配置成功了 1/usr/local/nginx/sbin/nginx -V 编辑mod_fastdfs.conf配置文件12345678910111213# 进入/opt/softwares/fastdfs-nginx-module-1.22/srccd /opt/softwares/fastdfs-nginx-module-1.22/src# 复制 mod_fastdfs.conf 到 /etc/fdfs 目录上cp mod_fastdfs.conf /etc/fdfs/# 进入fastdfs-6.06/conf 解压目录下cd /opt/softwares/fastdfs-6.06/conf# 复制 anti-steal.jpg http.conf mime.types 到 /etc/fdfs/上cp anti-steal.jpg http.conf mime.types /etc/fdfs/# 编辑 mod_fastdfs.conf vim /etc/fdfs/mod_fastdfs.conf mod_fastdfs.conf 修改内容 #配置tracker_server 服务器地址tracker_server=192.168.3.12:22122#需要和storage.conf 一致store_path0=/data/fastdfs/storage/store0#如果地址中包含group 前缀需要设置为trueurl_have_group_name=true 编辑nginx.conf 配置文件1vim /usr/loca/nginx/conf/nginx.conf #在server 下面新增#如果只有一个group1 配置location ~/group1/M00 { ngx_fastdfs_module;}#如果多个group可以使用正则,配置多个group 的时候用到location ~/group([0-9])/M00 { ngx_fastdfs_module;} 启动nginx1/usr/local/nginx/sbin/nginx 查看服务是否启动12345678# 查看是否启动ps aux | grep fdfs # 查看tracker端口是否正常netstat -tlnp | grep 22122 # 查看storage 端口是否正常netstat -tlnp | grep 23000# 查看nginx 端口是否正常netstat -tlnp | grep 80 上传使用方式JAVA 示例C# 示例","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://githubbycj.github.io/tags/linux/"}]},{"title":"window 安装FreeSSHD 实现与linux 文件互传","slug":"freesshd-install","date":"2020-06-25T13:56:01.000Z","updated":"2020-06-26T04:40:58.723Z","comments":true,"path":"2020/06/25/freesshd-install/","link":"","permalink":"https://githubbycj.github.io/2020/06/25/freesshd-install/","excerpt":"","text":"应用场景在搭建 Windows Server 服务器时有时候需要在linux 系统上直接发送文件或者通过终端直接链接过来， 所以需要windows 系统支持ssh 。 下载FreeSSHD下载地址http://www.freesshd.com/?ctt=download 下载freeSSHd.exe 安装双击运行freeSSHd.exe 然后一直next 直至完成就好了。 配置在桌面双击FreeSSHd快捷方式， 然后在右下角找到启动的FreeSSHd启动程序，并打开它。 设置登陆用户点击Users 的Tab 页如图：添加登陆用户这里我配置了两个可以登陆的用户，一个使用windows 授权方式登陆，一个是我自定义的root 账号 配置日志监听点击Logging 的Tab页如图:配置日志输入设置好点击应用即可 配置登陆授权方式点击 Authentication 的Tab页如图：设置好点击应用即可 配置SSH 信息点击SSH的Tab 页如图：设置好点击应用即可根据设置的端口去防火墙入站规则设置开启， 我这里用的是默认22 端口。 配置SFTP 上传文件路径点击SFTP的Tab 页如图： 开启服务打开cmd 命令行输入命令： 123# 重新启动 FreeSSHDService服务net stop FreeSSHDServicenet start FreeSSHDService 或者打开services.msc找到windows服务FreeSSHDService点击重新启动就好如图： 测试是否链接成功使用putty 的ssh 方式链接或者在 linux 系统上直接使用ssh 链接和发送文件测试就好。","categories":[],"tags":[{"name":"windows","slug":"windows","permalink":"https://githubbycj.github.io/tags/windows/"}]},{"title":"使用Putty 链接 linux 系统","slug":"use-putty","date":"2020-06-22T14:47:05.000Z","updated":"2020-06-26T06:21:00.033Z","comments":true,"path":"2020/06/22/use-putty/","link":"","permalink":"https://githubbycj.github.io/2020/06/22/use-putty/","excerpt":"","text":"说明使用putty 轻量级ssh 软件链接 linux shell 终端和互传文件。 下载文件下载 putty 软件 按照自己电脑的操作系统下载 ，可以下载 putty-64bit-0.73-installer.msi 安装使用，也可以直接下载putty.zip 解压直接使用， 由于本人不想安装直接下载putty.zip 文件。 下载后解压即可。解压后如图： 使用PUTTY.EXE链接终端双击打开PUTTY.EXE录入ip 地址和端口然后点击open 打开终端输入用户名和密码即可如图： 使用PSCP.EXE传输文件打开cmd 命令， cd 定位到PSCP.EXE的文件夹上 上传命令 123# scp 当前windows 文件 linux用户名@IP地址:/上传目录# 示例 将 test.txt 上传到linux /opt 文件夹上scp D:\\\\test.txt root@192.168.3.12:/opt 下载命令 123# scp linux用户名@IP地址:/文件地址 windows 下载目录# 示例 将 linux 上的test.txt下载到当前D盘scp root@192.168.3.12:/opt/test.txt D:\\\\ //todo 其余参数解释和使用待补充 使用PSFTP.EXE传输文件双击打开PSFTP.EXE 文件输入命令 12345678910# open ip 地址 回车 然后输入用户名和密码登陆open 192.168.3.12# cd /opt 切换到指定的操作目录cd /opt# lcd d:\\\\ 切换本地windows操作的目录lcd D:\\\\# put 上传文件名put test.txt# get 下载文件名get test2.txt //todo 其余参数解释和使用待补充 配置环境变量 为方便配置环境变量打开控制面板\\系统和安全\\系统打开高级系统设置点击环境变量 点击新建环境变量 变量名PUTTY_HOME, 变量值是putty 文件的目录比如我的：S:\\softwares\\common\\putty 在path系统变量后面追加 ;%PUTTY_HOME% 重新打开cmd 就可以在任意目录访问scp， putty，psftp 等命令了。 方便文件直接上传下载","categories":[],"tags":[{"name":"windows","slug":"windows","permalink":"https://githubbycj.github.io/tags/windows/"}]},{"title":"springmvc整合百度ueditor富文本编辑器","slug":"springmvc-merge-ueditor","date":"2020-06-18T12:27:17.000Z","updated":"2020-06-18T15:55:45.952Z","comments":true,"path":"2020/06/18/springmvc-merge-ueditor/","link":"","permalink":"https://githubbycj.github.io/2020/06/18/springmvc-merge-ueditor/","excerpt":"","text":"说明springmvc 页面整合百度ueditor 富文本编辑器， 使用spring自带的上传组件，替换掉ueditor 自带的jsp 上传组件， 下载ueditor， 下载jsp 版本utf-8 格式的好了 步骤一 搭建项目这里我为了方便使用了springboot 项目，在resource/static/文件夹下创建文件夹ueditor，然后解压下载好的ueditor1_4_3_3-utf8-jsp.zip文件， 将文件内容复制到ueditor 目录下，如图： 步骤二 编辑上传配置以及代码修改配置文件 ueditor.config.js 123456789101112131415161718192021222324(function () &#123; /** * 编辑器资源文件根路径。它所表示的含义是：以编辑器实例化页面为当前路径，指向编辑器资源文件（即dialog等文件夹）的路径。 * 鉴于很多同学在使用编辑器的时候出现的种种路径问题，此处强烈建议大家使用\"相对于网站根目录的相对路径\"进行配置。 * \"相对于网站根目录的相对路径\"也就是以斜杠开头的形如\"/myProject/ueditor/\"这样的路径。 * 如果站点中有多个不在同一层级的页面需要实例化编辑器，且引用了同一UEditor的时候，此处的URL可能不适用于每个页面的编辑器。 * 因此，UEditor提供了针对不同页面的编辑器可单独配置的根路径，具体来说，在需要实例化编辑器的页面最顶部写上如下代码即可。当然，需要令此处的URL等于对应的配置。 * window.UEDITOR_HOME_URL = \"/xxxx/xxxx/\"; */ var URL = window.UEDITOR_HOME_URL || getUEBasePath(); /** * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。 */ window.UEDITOR_CONFIG = &#123; //为编辑器实例添加一个路径，这个不能被注释 UEDITOR_HOME_URL: URL // 服务器统一请求接口路径 // , serverUrl: URL + \"jsp/controller.jsp\" 将这里改成下面的代码 , serverUrl: URL + \"/ueditor\"// ...... 省略下面的代码 新建UEditorController.java类 用户替换 ueditor自带的jsp 类上传组件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257@Controller@RequestMapping(\"/ueditor\")public class UEditorController &#123; @Value(\"$&#123;ueditor.imagepath&#125;\") private String imageUploadPath; @Value(\"$&#123;ueditor.videopath&#125;\") private String videoUploadPath; @Value(\"$&#123;ueditor.filepath&#125;\") private String fileUploadPath; @Value(\"$&#123;spring.profiles.active&#125;\") private List&lt;String&gt; active; @RequestMapping @ResponseBody public Object index(String action, HttpServletRequest request, Integer start, Integer size) throws Exception &#123; if (null == action) return config(); MultipartHttpServletRequest multipartHttpServletRequest = null; MultipartFile upfile; if (request instanceof MultipartHttpServletRequest) &#123; multipartHttpServletRequest = (MultipartHttpServletRequest) request; &#125; switch (action) &#123; case \"config\": // 配置获取 return config(); case \"uploadimage\": // 图片上传 upfile = multipartHttpServletRequest.getFile(\"upfile\"); return this.upfile(upfile, \"image\", this.imageUploadPath); case \"uploadvideo\": // 视频上传 upfile = multipartHttpServletRequest.getFile(\"upfile\"); return this.upfile(upfile, \"video\", this.videoUploadPath); case \"uploadfile\": // 附件上传 upfile = multipartHttpServletRequest.getFile(\"upfile\"); return this.upfile(upfile, \"file\", this.fileUploadPath); case \"uploadscrawl\": // 涂鸦上传 return uploadscrawl(request.getParameter(\"upfile\")); case \"listimage\": // 在线图片获取 return this.resources(this.imageUploadPath, start, size); case \"listfile\": // 在线文件获取 return this.resources(this.fileUploadPath, start, size); &#125; return null; &#125; /** * 显示图片 * * @param ymd * @param imgname * @param response * @throws IOException */ @RequestMapping(\"/image/&#123;ymd&#125;/&#123;imgname&#125;\") public void image(@PathVariable(\"ymd\") String ymd, @PathVariable(\"imgname\") String imgname, HttpServletResponse response) throws IOException &#123; this.responsefile(this.imageUploadPath, ymd, imgname, response); &#125; /** * 显示 视频 * * @param ymd * @param videoname * @param response * @throws IOException */ @RequestMapping(\"/video/&#123;ymd&#125;/&#123;videoname&#125;\") public void video(@PathVariable(\"ymd\") String ymd, @PathVariable(\"videoname\") String videoname, HttpServletResponse response) throws IOException &#123; this.responsefile(this.videoUploadPath, ymd, videoname, response); &#125; /** * 文件响应 * * @param ymd * @param filename * @param response * @throws IOException */ @RequestMapping(\"/file/&#123;ymd&#125;/&#123;filename&#125;\") public void file(@PathVariable(\"ymd\") String ymd, @PathVariable(\"filename\") String filename, HttpServletResponse response) throws IOException &#123; this.responsefile(this.fileUploadPath, ymd, filename, response); &#125; /** * 文件响应 * * @param filetype * @param ymd * @param filenamne * @param response * @throws IOException */ private void responsefile(String uploadPathPrefix, String ymd, String filenamne, HttpServletResponse response) throws IOException &#123; response.setContentType(\"application/octet-stream;charset=utf-8\"); response.setHeader(\"content-disposition\", \"attachment;filename=\" + java.net.URLEncoder.encode(filenamne, \"utf-8\")); String fullPath = uploadPathPrefix + File.separator + ymd + File.separator + filenamne; ; File downFile = new File(fullPath); try (OutputStream os = response.getOutputStream()) &#123; try (BufferedInputStream in = new BufferedInputStream(new FileInputStream(downFile))) &#123; int len; byte[] buf = new byte[4096]; while ((len = in.read(buf)) != -1) &#123; os.write(buf, 0, len); &#125; &#125; &#125; &#125; /** * 在线资源浏览 分页获取 * * @param resourcepath * @param start * @param size * @return */ private Map&lt;String, Object&gt; resources(String resourcepath, Integer start, Integer size) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(\"state\", \"SUCCESS\");// UEDI map.put(\"start\", start + \"\"); File file = new File(resourcepath); File[] folders = file.listFiles(); List&lt;File&gt; folderlist = Arrays.asList(folders); folderlist.sort((f1, f2) -&gt; &#123; return f2.getName().compareTo(f1.getName()); &#125;); List&lt;String&gt; listurl = new ArrayList&lt;String&gt;(0); int end = folders.length; if (end &gt; 20) end = 20; for (int i = 0; i &lt; end; i++) &#123; File folder = folders[i]; File[] files = folder.listFiles(); for (File f : files) &#123; String abspath = f.getAbsolutePath(); String[] fs = abspath.split(\"\\\\\\\\\"); String ymdpath = \"/\" + fs[fs.length - 4] + \"/\" + fs[fs.length - 3] + \"/\" + fs[fs.length - 2] + \"/\" + fs[fs.length - 1]; listurl.add(ymdpath); &#125; &#125; map.put(\"total\", listurl.size() + \"\"); int len = start + size; if (len &gt;= listurl.size()) len = listurl.size(); listurl = listurl.subList(start, len); List&lt;Map&lt;String, String&gt;&gt; listmap = new ArrayList&lt;Map&lt;String, String&gt;&gt;(); for (int i = 0; i &lt; listurl.size(); i++) &#123; String url = listurl.get(i); Map&lt;String, String&gt; urlmap = new HashMap&lt;String, String&gt;(); urlmap.put(\"url\", url); listmap.add(urlmap); &#125; map.put(\"list\", listmap); return map; &#125; /** * 获取配置 * * @return * @throws IOException */ private String config() throws IOException &#123; BufferedReader reader = null; StringBuilder builder = new StringBuilder(); // 这里根据配置文件来判断 如果似乎部署jar 包的方式需要用到 classLoader 来加载配置文件 if (null != active &amp;&amp; active.contains(\"prod\")) &#123; InputStream is = this.getClass().getClassLoader().getResourceAsStream(\"static/ueditor/jsp/config.json\"); reader = new BufferedReader(new InputStreamReader(is)); &#125; else &#123; reader = new BufferedReader( new FileReader(ResourceUtils.getFile(\"classpath:static/ueditor/jsp/config.json\"))); &#125; for (String line = \"\"; (line = reader.readLine()) != null;) &#123; builder.append(line); &#125; return builder.toString(); &#125; /** * 上传涂鸦图片 * * @param base64img * @return */ private Map&lt;String, String&gt; uploadscrawl(String base64img) throws IOException &#123; String suffix = \".jpg\"; // 默认jpg 文件 String fileName = new SimpleDateFormat(\"yyyyMMddHHmmssSSS\").format(new Date()) + suffix; String fullPath = \"\"; String ymd = new SimpleDateFormat(\"yyyyMMdd\").format(new Date()); File floder = new File(this.imageUploadPath + File.separator + ymd); if (!floder.exists()) floder.mkdirs(); fullPath = floder.getPath() + File.separator + fileName; byte[] bs = Base64Utils.decodeFromString(base64img); try (OutputStream os = new FileOutputStream(new File(fullPath))) &#123; os.write(bs); os.flush(); os.close(); &#125; return ueResult(\"SUCCESS\", String.format(\"/ueditor/image/%s/%s\", ymd, fileName), \"\", \"\"); &#125; /** * 上传文件 * * @param upfile 文件 * @param filetype 文件类型 image | video | file * @return * @throws IllegalStateException * @throws IOException */ private Map&lt;String, String&gt; upfile(MultipartFile upfile, String filetype, String uploadPathPrefix) throws IllegalStateException, IOException &#123; String suffix = upfile.getOriginalFilename().substring(upfile.getOriginalFilename().lastIndexOf(\".\")); String fileName = new SimpleDateFormat(\"yyyyMMddHHmmssSSS\").format(new Date()) + suffix; String fullPath = \"\"; String ymd = new SimpleDateFormat(\"yyyyMMdd\").format(new Date()); File floder = new File(uploadPathPrefix + File.separator + ymd); if (!floder.exists()) floder.mkdirs(); fullPath = floder.getPath() + File.separator + fileName; upfile.transferTo(new File(fullPath)); String vmpath = String.format(\"/ueditor/%s/%s/%s\", filetype, ymd, fileName); return ueResult(\"SUCCESS\", vmpath, upfile.getName(), upfile.getOriginalFilename()); &#125; /** * 返回 ueditor 参数 * * @param state * @param url * @param title * @param original * @return */ private Map&lt;String, String&gt; ueResult(String state, String url, String title, String original) &#123; Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); map.put(\"state\", state);// UEDITOR的规则:不为SUCCESS则显示state的内容 map.put(\"url\", url); // 能访问到你现在图片的路径 map.put(\"title\", title); map.put(\"original\", original); return map; &#125;&#125; 在application.yml 文件 新增文件保存路径 123456789101112server: port: 7001spring: profiles: active: dev # 配置启动方式 dev | prod # 配置ueditor 下载的位置ueditor: imagepath: D:\\\\ueditor\\\\image\\\\ videopath: D:\\\\ueditor\\\\video\\\\ filepath: D:\\\\ueditor\\\\file\\\\ 步骤三 测试测试页面代码 123456789101112131415&lt;html&gt;&lt;head&gt;&lt;title&gt;富文本编辑器&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script id=\"container\" name=\"content\" type=\"text/plain\"&gt; &lt;/script&gt; &lt;script type=\"text/javascript\" src=\"/ueditor/ueditor.config.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"/ueditor/ueditor.all.min.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; var ue = UE.getEditor('container'); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 启动springboot 项目打开页面测试即可","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://githubbycj.github.io/tags/java/"}]},{"title":"怎样创建hexo 的博客","slug":"create-hexo-file","date":"2020-05-30T14:16:58.000Z","updated":"2020-05-30T14:26:46.788Z","comments":true,"path":"2020/05/30/create-hexo-file/","link":"","permalink":"https://githubbycj.github.io/2020/05/30/create-hexo-file/","excerpt":"","text":"步骤一打开命令行（我这里用的是windows 系统 用cmd 命令行） 1$ hexo new \"这里输入一个文件的名称（一般用英文）\" 步骤二在部署目录 hexo/source/_posts/ 文件夹下找到刚刚的文件以.md 结尾，然后对它进行编辑(需要熟悉markdown 语法) 步骤三编辑完成后 输入命令 123$ hexo clean ##清空缓存信息$ hexo generate ## 根据.md 格式的文件生成hexo 需要的html 静态网页$ hexo deploy ## 发布到GitHub上","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://githubbycj.github.io/tags/Hexo/"}]},{"title":"如何删除Hexo 发布博客","slug":"delete-hexo-file","date":"2020-05-30T14:06:09.000Z","updated":"2020-05-30T14:12:08.890Z","comments":true,"path":"2020/05/30/delete-hexo-file/","link":"","permalink":"https://githubbycj.github.io/2020/05/30/delete-hexo-file/","excerpt":"","text":"如何删除Hexo发布的文章进入hexo 的根目录然后进入source/_posts 文件夹下，找到需要删除的 .md文件删除 执行命令重新生成发布就好 123&gt; hexo clean&gt; hexo generate&gt; hexo deploy","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://githubbycj.github.io/tags/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-05-30T09:36:22.257Z","updated":"2020-05-30T09:36:22.257Z","comments":true,"path":"2020/05/30/hello-world/","link":"","permalink":"https://githubbycj.github.io/2020/05/30/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"使用Nuget 安装 SQLite 小型数据库","slug":"use-nuget-install-sqlite","date":"2017-10-29T14:07:04.000Z","updated":"2020-05-30T15:41:13.456Z","comments":true,"path":"2017/10/29/use-nuget-install-sqlite/","link":"","permalink":"https://githubbycj.github.io/2017/10/29/use-nuget-install-sqlite/","excerpt":"","text":"说明记录一下 使用Nuget 安装 SQLite 小型数据库，并记录使用示例 操作步骤如下第1步 下载安装方式 去nuget 直接下载System.Data.SQLite.dll然后引用 在VS 工具 –&gt; Nuget包管理器 –&gt; 程序包管理器控制台 安装dll12# 输入命令安装，也可以使用可视化工具安装Install-Package System.Data.SQLite -Version 1.0.105.2 第2步 新建Sqlite 数据库 使用CodeFirst 创建实体类 要求和表的字段一一对应 其他特性不列举1234567891011121314&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 实体类&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;[Table(&quot;表名&quot;)]public class TestTable&#123; [Key] public String guid &#123; get; set; &#125; public String field01 &#123;get; set;&#125; public String field02 &#123;get; set;&#125; &#x2F;&#x2F;。。。。&#125; 新建ConnectionString链接信息和DBContext类 123456789101112&lt;!-- app.config 配置--&gt;&lt;!-- 更改或添加providers --&gt; &lt;providers&gt; &lt;provider invariantName=\"System.Data.SqlClient\" type=\"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer\" /&gt; &lt;provider invariantName=\"System.Data.SQLite.EF6\" type=\"System.Data.SQLite.EF6.SQLiteProviderServices, System.Data.SQLite.EF6\" /&gt; &lt;provider invariantName=\"System.Data.SQLite\" type=\"System.Data.SQLite.EF6.SQLiteProviderServices, System.Data.SQLite.EF6 \" /&gt; &lt;/providers&gt;&lt;!-- 添加 connectionString --&gt;&lt;connectionStrings&gt; &lt;add name=\"SQLiteDbContext\" connectionString=\"Data Source=CarInfoDB.sqlite\" providerName=\"System.Data.SQLite.EF6\" /&gt;&lt;/connectionStrings&gt; 123456789//C# 代码配置 public class SQLiteDbContext : DbContext&#123; // 可以使用 base 指定链接名 ， 也可以不指定但类名 要和链接名一致 //public SQLiteDbContext() : base(\"SQLiteDbContext\") &#123; //&#125; public DbSet&lt;TestTable&gt; TestTableEntities &#123; get; set; &#125;&#125; 第3步 测试是否自动生成sqlite数据库12345public void TestConn() &#123; SQLiteDbContext dbCxt = new SQLiteDbContext(); var res = dbCxt.TestTableEntities.Where(m =&gt; true).Count(); System.Console.WriteLine(res);&#125;","categories":[],"tags":[{"name":"C#","slug":"C","permalink":"https://githubbycj.github.io/tags/C/"}]},{"title":"PL/SQL Developer 远程链接 Oracle 数据库","slug":"plsql-Developer-connect-oracle","date":"2016-12-12T04:13:23.000Z","updated":"2020-05-30T15:11:20.740Z","comments":true,"path":"2016/12/12/plsql-Developer-connect-oracle/","link":"","permalink":"https://githubbycj.github.io/2016/12/12/plsql-Developer-connect-oracle/","excerpt":"","text":"说明本机无需安装Oracle ， 只需要安装PL/SQL 和Oracle 驱动 即可远程链接Oracle 数据库 。 第1步 下载工具 pl/sql 工具官网 oracle 驱动包 官网 第2步 先安装pl/sql安装过程 略 第3步 解压oracle 驱动3.1 解压 instantclient_12_1 放到指定目录3.2 在instantclient_12_1 里面 新建文件夹 NETWORK/ADMIN/3.3 再新建一个文件 tnsnames.ora （这里注意tnsnames.org 是固定写法）文件内容配置oracle 链接信息 第4步 环境配置4.1 进入windows 环境变量配置4.2 配置信息如下：ORACLE_HOME = F:\\instantclient_12_1 //指定的目录TNS_ADMIN = F:\\instantclient_12_1\\NETWORK\\ADMIN //配置 tsn文件路径NLS_LANG = SIMPLIFIED CHINESE_CHINA.ZHS16GBK //配置编码在path 最后添加 %ORACLE_HOME% 第5步 配置PL/SQL5.1 打开pl/sql 菜单 Tools –&gt; Preferences 如图： 最后一步 重启PL/SQL6.1 重启pl/sql 查看databases 是否有tnsnames 的链接 ，有的话就配置成功了","categories":[],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://githubbycj.github.io/tags/oracle/"}]}],"categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://githubbycj.github.io/tags/linux/"},{"name":"windows","slug":"windows","permalink":"https://githubbycj.github.io/tags/windows/"},{"name":"java","slug":"java","permalink":"https://githubbycj.github.io/tags/java/"},{"name":"Hexo","slug":"Hexo","permalink":"https://githubbycj.github.io/tags/Hexo/"},{"name":"C#","slug":"C","permalink":"https://githubbycj.github.io/tags/C/"},{"name":"oracle","slug":"oracle","permalink":"https://githubbycj.github.io/tags/oracle/"}]}