{"meta":{"title":"昌久个人博客","subtitle":"我是子标题不知道说啥","description":"","author":"昌久","url":"https://githubbycj.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-05-31T03:17:38.199Z","updated":"2020-05-31T03:17:38.199Z","comments":false,"path":"/404.html","permalink":"https://githubbycj.github.io/404.html","excerpt":"","text":""},{"title":"分类","date":"2020-05-30T12:16:27.437Z","updated":"2020-05-30T12:16:27.437Z","comments":false,"path":"categories/index.html","permalink":"https://githubbycj.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-30T12:16:27.436Z","updated":"2020-05-30T12:16:27.436Z","comments":false,"path":"about/index.html","permalink":"https://githubbycj.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2020-05-30T12:16:27.436Z","updated":"2020-05-30T12:16:27.436Z","comments":false,"path":"books/index.html","permalink":"https://githubbycj.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-05-30T12:16:27.437Z","updated":"2020-05-30T12:16:27.437Z","comments":true,"path":"links/index.html","permalink":"https://githubbycj.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-05-30T12:16:27.437Z","updated":"2020-05-30T12:16:27.437Z","comments":false,"path":"repository/index.html","permalink":"https://githubbycj.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-05-30T12:16:27.438Z","updated":"2020-05-30T12:16:27.438Z","comments":false,"path":"tags/index.html","permalink":"https://githubbycj.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"springmvc-merge-ueditor","slug":"springmvc-merge-ueditor","date":"2020-06-18T12:27:17.000Z","updated":"2020-06-18T15:52:25.280Z","comments":true,"path":"2020/06/18/springmvc-merge-ueditor/","link":"","permalink":"https://githubbycj.github.io/2020/06/18/springmvc-merge-ueditor/","excerpt":"","text":"说明springmvc 页面整合百度ueditor 富文本编辑器， 使用spring自带的上传组件，替换掉ueditor 自带的jsp 上传组件， 下载ueditor， 下载jsp 版本utf-8 格式的好了 步骤一 搭建项目这里我为了方便使用了springboot 项目，在resource/static/文件夹下创建文件夹ueditor，然后解压下载好的ueditor1_4_3_3-utf8-jsp.zip文件， 将文件内容复制到ueditor 目录下，如图： 步骤二 编辑上传配置以及代码修改配置文件 ueditor.config.js 123456789101112131415161718192021222324(function () &#123; /** * 编辑器资源文件根路径。它所表示的含义是：以编辑器实例化页面为当前路径，指向编辑器资源文件（即dialog等文件夹）的路径。 * 鉴于很多同学在使用编辑器的时候出现的种种路径问题，此处强烈建议大家使用\"相对于网站根目录的相对路径\"进行配置。 * \"相对于网站根目录的相对路径\"也就是以斜杠开头的形如\"/myProject/ueditor/\"这样的路径。 * 如果站点中有多个不在同一层级的页面需要实例化编辑器，且引用了同一UEditor的时候，此处的URL可能不适用于每个页面的编辑器。 * 因此，UEditor提供了针对不同页面的编辑器可单独配置的根路径，具体来说，在需要实例化编辑器的页面最顶部写上如下代码即可。当然，需要令此处的URL等于对应的配置。 * window.UEDITOR_HOME_URL = \"/xxxx/xxxx/\"; */ var URL = window.UEDITOR_HOME_URL || getUEBasePath(); /** * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。 */ window.UEDITOR_CONFIG = &#123; //为编辑器实例添加一个路径，这个不能被注释 UEDITOR_HOME_URL: URL // 服务器统一请求接口路径 // , serverUrl: URL + \"jsp/controller.jsp\" 将这里改成下面的代码 , serverUrl: URL + \"/ueditor\"// ...... 省略下面的代码 新建UEditorController.java类 用户替换 ueditor自带的jsp 类上传组件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257@Controller@RequestMapping(\"/ueditor\")public class UEditorController &#123; @Value(\"$&#123;ueditor.imagepath&#125;\") private String imageUploadPath; @Value(\"$&#123;ueditor.videopath&#125;\") private String videoUploadPath; @Value(\"$&#123;ueditor.filepath&#125;\") private String fileUploadPath; @Value(\"$&#123;spring.profiles.active&#125;\") private List&lt;String&gt; active; @RequestMapping @ResponseBody public Object index(String action, HttpServletRequest request, Integer start, Integer size) throws Exception &#123; if (null == action) return config(); MultipartHttpServletRequest multipartHttpServletRequest = null; MultipartFile upfile; if (request instanceof MultipartHttpServletRequest) &#123; multipartHttpServletRequest = (MultipartHttpServletRequest) request; &#125; switch (action) &#123; case \"config\": // 配置获取 return config(); case \"uploadimage\": // 图片上传 upfile = multipartHttpServletRequest.getFile(\"upfile\"); return this.upfile(upfile, \"image\", this.imageUploadPath); case \"uploadvideo\": // 视频上传 upfile = multipartHttpServletRequest.getFile(\"upfile\"); return this.upfile(upfile, \"video\", this.videoUploadPath); case \"uploadfile\": // 附件上传 upfile = multipartHttpServletRequest.getFile(\"upfile\"); return this.upfile(upfile, \"file\", this.fileUploadPath); case \"uploadscrawl\": // 涂鸦上传 return uploadscrawl(request.getParameter(\"upfile\")); case \"listimage\": // 在线图片获取 return this.resources(this.imageUploadPath, start, size); case \"listfile\": // 在线文件获取 return this.resources(this.fileUploadPath, start, size); &#125; return null; &#125; /** * 显示图片 * * @param ymd * @param imgname * @param response * @throws IOException */ @RequestMapping(\"/image/&#123;ymd&#125;/&#123;imgname&#125;\") public void image(@PathVariable(\"ymd\") String ymd, @PathVariable(\"imgname\") String imgname, HttpServletResponse response) throws IOException &#123; this.responsefile(this.imageUploadPath, ymd, imgname, response); &#125; /** * 显示 视频 * * @param ymd * @param videoname * @param response * @throws IOException */ @RequestMapping(\"/video/&#123;ymd&#125;/&#123;videoname&#125;\") public void video(@PathVariable(\"ymd\") String ymd, @PathVariable(\"videoname\") String videoname, HttpServletResponse response) throws IOException &#123; this.responsefile(this.videoUploadPath, ymd, videoname, response); &#125; /** * 文件响应 * * @param ymd * @param filename * @param response * @throws IOException */ @RequestMapping(\"/file/&#123;ymd&#125;/&#123;filename&#125;\") public void file(@PathVariable(\"ymd\") String ymd, @PathVariable(\"filename\") String filename, HttpServletResponse response) throws IOException &#123; this.responsefile(this.fileUploadPath, ymd, filename, response); &#125; /** * 文件响应 * * @param filetype * @param ymd * @param filenamne * @param response * @throws IOException */ private void responsefile(String uploadPathPrefix, String ymd, String filenamne, HttpServletResponse response) throws IOException &#123; response.setContentType(\"application/octet-stream;charset=utf-8\"); response.setHeader(\"content-disposition\", \"attachment;filename=\" + java.net.URLEncoder.encode(filenamne, \"utf-8\")); String fullPath = uploadPathPrefix + File.separator + ymd + File.separator + filenamne; ; File downFile = new File(fullPath); try (OutputStream os = response.getOutputStream()) &#123; try (BufferedInputStream in = new BufferedInputStream(new FileInputStream(downFile))) &#123; int len; byte[] buf = new byte[4096]; while ((len = in.read(buf)) != -1) &#123; os.write(buf, 0, len); &#125; &#125; &#125; &#125; /** * 在线资源浏览 分页获取 * * @param resourcepath * @param start * @param size * @return */ private Map&lt;String, Object&gt; resources(String resourcepath, Integer start, Integer size) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(\"state\", \"SUCCESS\");// UEDI map.put(\"start\", start + \"\"); File file = new File(resourcepath); File[] folders = file.listFiles(); List&lt;File&gt; folderlist = Arrays.asList(folders); folderlist.sort((f1, f2) -&gt; &#123; return f2.getName().compareTo(f1.getName()); &#125;); List&lt;String&gt; listurl = new ArrayList&lt;String&gt;(0); int end = folders.length; if (end &gt; 20) end = 20; for (int i = 0; i &lt; end; i++) &#123; File folder = folders[i]; File[] files = folder.listFiles(); for (File f : files) &#123; String abspath = f.getAbsolutePath(); String[] fs = abspath.split(\"\\\\\\\\\"); String ymdpath = \"/\" + fs[fs.length - 4] + \"/\" + fs[fs.length - 3] + \"/\" + fs[fs.length - 2] + \"/\" + fs[fs.length - 1]; listurl.add(ymdpath); &#125; &#125; map.put(\"total\", listurl.size() + \"\"); int len = start + size; if (len &gt;= listurl.size()) len = listurl.size(); listurl = listurl.subList(start, len); List&lt;Map&lt;String, String&gt;&gt; listmap = new ArrayList&lt;Map&lt;String, String&gt;&gt;(); for (int i = 0; i &lt; listurl.size(); i++) &#123; String url = listurl.get(i); Map&lt;String, String&gt; urlmap = new HashMap&lt;String, String&gt;(); urlmap.put(\"url\", url); listmap.add(urlmap); &#125; map.put(\"list\", listmap); return map; &#125; /** * 获取配置 * * @return * @throws IOException */ private String config() throws IOException &#123; BufferedReader reader = null; StringBuilder builder = new StringBuilder(); // 这里根据配置文件来判断 如果似乎部署jar 包的方式需要用到 classLoader 来加载配置文件 if (null != active &amp;&amp; active.contains(\"prod\")) &#123; InputStream is = this.getClass().getClassLoader().getResourceAsStream(\"static/ueditor/jsp/config.json\"); reader = new BufferedReader(new InputStreamReader(is)); &#125; else &#123; reader = new BufferedReader( new FileReader(ResourceUtils.getFile(\"classpath:static/ueditor/jsp/config.json\"))); &#125; for (String line = \"\"; (line = reader.readLine()) != null;) &#123; builder.append(line); &#125; return builder.toString(); &#125; /** * 上传涂鸦图片 * * @param base64img * @return */ private Map&lt;String, String&gt; uploadscrawl(String base64img) throws IOException &#123; String suffix = \".jpg\"; // 默认jpg 文件 String fileName = new SimpleDateFormat(\"yyyyMMddHHmmssSSS\").format(new Date()) + suffix; String fullPath = \"\"; String ymd = new SimpleDateFormat(\"yyyyMMdd\").format(new Date()); File floder = new File(this.imageUploadPath + File.separator + ymd); if (!floder.exists()) floder.mkdirs(); fullPath = floder.getPath() + File.separator + fileName; byte[] bs = Base64Utils.decodeFromString(base64img); try (OutputStream os = new FileOutputStream(new File(fullPath))) &#123; os.write(bs); os.flush(); os.close(); &#125; return ueResult(\"SUCCESS\", String.format(\"/ueditor/image/%s/%s\", ymd, fileName), \"\", \"\"); &#125; /** * 上传文件 * * @param upfile 文件 * @param filetype 文件类型 image | video | file * @return * @throws IllegalStateException * @throws IOException */ private Map&lt;String, String&gt; upfile(MultipartFile upfile, String filetype, String uploadPathPrefix) throws IllegalStateException, IOException &#123; String suffix = upfile.getOriginalFilename().substring(upfile.getOriginalFilename().lastIndexOf(\".\")); String fileName = new SimpleDateFormat(\"yyyyMMddHHmmssSSS\").format(new Date()) + suffix; String fullPath = \"\"; String ymd = new SimpleDateFormat(\"yyyyMMdd\").format(new Date()); File floder = new File(uploadPathPrefix + File.separator + ymd); if (!floder.exists()) floder.mkdirs(); fullPath = floder.getPath() + File.separator + fileName; upfile.transferTo(new File(fullPath)); String vmpath = String.format(\"/ueditor/%s/%s/%s\", filetype, ymd, fileName); return ueResult(\"SUCCESS\", vmpath, upfile.getName(), upfile.getOriginalFilename()); &#125; /** * 返回 ueditor 参数 * * @param state * @param url * @param title * @param original * @return */ private Map&lt;String, String&gt; ueResult(String state, String url, String title, String original) &#123; Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); map.put(\"state\", state);// UEDITOR的规则:不为SUCCESS则显示state的内容 map.put(\"url\", url); // 能访问到你现在图片的路径 map.put(\"title\", title); map.put(\"original\", original); return map; &#125;&#125; 在application.yml 文件 新增文件保存路径 123456789101112server: port: 7001spring: profiles: active: dev # 配置启动方式 dev | prod # 配置ueditor 下载的位置ueditor: imagepath: D:\\\\ueditor\\\\image\\\\ videopath: D:\\\\ueditor\\\\video\\\\ filepath: D:\\\\ueditor\\\\file\\\\ 步骤三 测试测试页面代码 123456789101112131415&lt;html&gt;&lt;head&gt;&lt;title&gt;富文本编辑器&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script id=\"container\" name=\"content\" type=\"text/plain\"&gt; &lt;/script&gt; &lt;script type=\"text/javascript\" src=\"/ueditor/ueditor.config.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"/ueditor/ueditor.all.min.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; var ue = UE.getEditor('container'); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 启动springboot 项目打开页面测试即可","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://githubbycj.github.io/tags/java/"}]},{"title":"怎样创建hexo 的博客","slug":"create-hexo-file","date":"2020-05-30T14:16:58.000Z","updated":"2020-05-30T14:26:46.788Z","comments":true,"path":"2020/05/30/create-hexo-file/","link":"","permalink":"https://githubbycj.github.io/2020/05/30/create-hexo-file/","excerpt":"","text":"步骤一打开命令行（我这里用的是windows 系统 用cmd 命令行） 1$ hexo new \"这里输入一个文件的名称（一般用英文）\" 步骤二在部署目录 hexo/source/_posts/ 文件夹下找到刚刚的文件以.md 结尾，然后对它进行编辑(需要熟悉markdown 语法) 步骤三编辑完成后 输入命令 123$ hexo clean ##清空缓存信息$ hexo generate ## 根据.md 格式的文件生成hexo 需要的html 静态网页$ hexo deploy ## 发布到GitHub上","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://githubbycj.github.io/tags/Hexo/"}]},{"title":"如何删除Hexo 发布博客","slug":"delete-hexo-file","date":"2020-05-30T14:06:09.000Z","updated":"2020-05-30T14:12:08.890Z","comments":true,"path":"2020/05/30/delete-hexo-file/","link":"","permalink":"https://githubbycj.github.io/2020/05/30/delete-hexo-file/","excerpt":"","text":"如何删除Hexo发布的文章进入hexo 的根目录然后进入source/_posts 文件夹下，找到需要删除的 .md文件删除 执行命令重新生成发布就好 123&gt; hexo clean&gt; hexo generate&gt; hexo deploy","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://githubbycj.github.io/tags/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-05-30T09:36:22.257Z","updated":"2020-05-30T09:36:22.257Z","comments":true,"path":"2020/05/30/hello-world/","link":"","permalink":"https://githubbycj.github.io/2020/05/30/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"使用Nuget 安装 SQLite 小型数据库","slug":"use-nuget-install-sqlite","date":"2017-10-29T14:07:04.000Z","updated":"2020-05-30T15:41:13.456Z","comments":true,"path":"2017/10/29/use-nuget-install-sqlite/","link":"","permalink":"https://githubbycj.github.io/2017/10/29/use-nuget-install-sqlite/","excerpt":"","text":"说明记录一下 使用Nuget 安装 SQLite 小型数据库，并记录使用示例 操作步骤如下第1步 下载安装方式 去nuget 直接下载System.Data.SQLite.dll然后引用 在VS 工具 –&gt; Nuget包管理器 –&gt; 程序包管理器控制台 安装dll12# 输入命令安装，也可以使用可视化工具安装Install-Package System.Data.SQLite -Version 1.0.105.2 第2步 新建Sqlite 数据库 使用CodeFirst 创建实体类 要求和表的字段一一对应 其他特性不列举1234567891011121314&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 实体类&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;[Table(&quot;表名&quot;)]public class TestTable&#123; [Key] public String guid &#123; get; set; &#125; public String field01 &#123;get; set;&#125; public String field02 &#123;get; set;&#125; &#x2F;&#x2F;。。。。&#125; 新建ConnectionString链接信息和DBContext类 123456789101112&lt;!-- app.config 配置--&gt;&lt;!-- 更改或添加providers --&gt; &lt;providers&gt; &lt;provider invariantName=\"System.Data.SqlClient\" type=\"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer\" /&gt; &lt;provider invariantName=\"System.Data.SQLite.EF6\" type=\"System.Data.SQLite.EF6.SQLiteProviderServices, System.Data.SQLite.EF6\" /&gt; &lt;provider invariantName=\"System.Data.SQLite\" type=\"System.Data.SQLite.EF6.SQLiteProviderServices, System.Data.SQLite.EF6 \" /&gt; &lt;/providers&gt;&lt;!-- 添加 connectionString --&gt;&lt;connectionStrings&gt; &lt;add name=\"SQLiteDbContext\" connectionString=\"Data Source=CarInfoDB.sqlite\" providerName=\"System.Data.SQLite.EF6\" /&gt;&lt;/connectionStrings&gt; 123456789//C# 代码配置 public class SQLiteDbContext : DbContext&#123; // 可以使用 base 指定链接名 ， 也可以不指定但类名 要和链接名一致 //public SQLiteDbContext() : base(\"SQLiteDbContext\") &#123; //&#125; public DbSet&lt;TestTable&gt; TestTableEntities &#123; get; set; &#125;&#125; 第3步 测试是否自动生成sqlite数据库12345public void TestConn() &#123; SQLiteDbContext dbCxt = new SQLiteDbContext(); var res = dbCxt.TestTableEntities.Where(m =&gt; true).Count(); System.Console.WriteLine(res);&#125;","categories":[],"tags":[{"name":"C#","slug":"C","permalink":"https://githubbycj.github.io/tags/C/"}]},{"title":"PL/SQL Developer 远程链接 Oracle 数据库","slug":"plsql-Developer-connect-oracle","date":"2016-12-12T04:13:23.000Z","updated":"2020-05-30T15:11:20.740Z","comments":true,"path":"2016/12/12/plsql-Developer-connect-oracle/","link":"","permalink":"https://githubbycj.github.io/2016/12/12/plsql-Developer-connect-oracle/","excerpt":"","text":"说明本机无需安装Oracle ， 只需要安装PL/SQL 和Oracle 驱动 即可远程链接Oracle 数据库 。 第1步 下载工具 pl/sql 工具官网 oracle 驱动包 官网 第2步 先安装pl/sql安装过程 略 第3步 解压oracle 驱动3.1 解压 instantclient_12_1 放到指定目录3.2 在instantclient_12_1 里面 新建文件夹 NETWORK/ADMIN/3.3 再新建一个文件 tnsnames.ora （这里注意tnsnames.org 是固定写法）文件内容配置oracle 链接信息 第4步 环境配置4.1 进入windows 环境变量配置4.2 配置信息如下：ORACLE_HOME = F:\\instantclient_12_1 //指定的目录TNS_ADMIN = F:\\instantclient_12_1\\NETWORK\\ADMIN //配置 tsn文件路径NLS_LANG = SIMPLIFIED CHINESE_CHINA.ZHS16GBK //配置编码在path 最后添加 %ORACLE_HOME% 第5步 配置PL/SQL5.1 打开pl/sql 菜单 Tools –&gt; Preferences 如图： 最后一步 重启PL/SQL6.1 重启pl/sql 查看databases 是否有tnsnames 的链接 ，有的话就配置成功了","categories":[],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://githubbycj.github.io/tags/oracle/"}]}],"categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://githubbycj.github.io/tags/java/"},{"name":"Hexo","slug":"Hexo","permalink":"https://githubbycj.github.io/tags/Hexo/"},{"name":"C#","slug":"C","permalink":"https://githubbycj.github.io/tags/C/"},{"name":"oracle","slug":"oracle","permalink":"https://githubbycj.github.io/tags/oracle/"}]}